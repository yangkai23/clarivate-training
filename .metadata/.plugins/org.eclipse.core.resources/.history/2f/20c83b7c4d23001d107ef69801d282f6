package com.cl.foodApp.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.cl.foodApp.dao.FoodItemDao;
import com.cl.foodApp.dao.FoodOrderDao;
import com.cl.foodApp.dto.FoodItem;
import com.cl.foodApp.dto.FoodOrder;
import com.cl.foodApp.exceptions.OrderNotFoundException;
import com.cl.foodApp.util.ResponseStructure;

@Service
public class FoodOrderService {
	@Autowired
	FoodOrderDao dao;
	@Autowired
	FoodItemDao fidao;

	public ResponseEntity<ResponseStructure<FoodOrder>> saveOrder(FoodOrder order) {
		ArrayList<FoodItem> list = new ArrayList<>();
		for (FoodItem id : order.getItems()) {
			list.add(fidao.getItemById(id.getItem_id()).get());
		}
		order.setItems(list);
		order.setOrderDeliveredTime(new Date().toString());
		FoodOrder fo = dao.saveOrder(order);
		ResponseStructure<FoodOrder> rs = new ResponseStructure<>();
		rs.setMessage("order added");
		rs.setT(fo);
		return new ResponseEntity<ResponseStructure<FoodOrder>>(rs, HttpStatus.CREATED);
	}

	public ResponseEntity<ResponseStructure<FoodOrder>> editOrder(FoodOrder order) {
		FoodOrder fo = dao.getOrderById(order.getOrder_id());
		if (fo == null)
			throw new OrderNotFoundException();
		order.setOrderDeliveredTime(new Date().toString());
		ArrayList<FoodItem> list = new ArrayList<>();
		for (FoodItem id : order.getItems()) {
			list.add(fidao.getItemById(id.getItem_id()));
		}
		order.setItems(list);
		ResponseStructure<FoodOrder> rs = new ResponseStructure<>();
		rs.setMessage("order added");
		rs.setT(dao.updateOrder(order));
		return new ResponseEntity<ResponseStructure<FoodOrder>>(rs, HttpStatus.OK);
	}

	public ResponseEntity<ResponseStructure<FoodOrder>> deleteOrder(int id) {
		FoodOrder fo = dao.getOrderById(id);
		if (fo == null)
			throw new OrderNotFoundException();
		ResponseStructure<FoodOrder> rs = new ResponseStructure<>();
		rs.setMessage("order deleted");
		rs.setT(dao.deleteOrder(id));
		return new ResponseEntity<ResponseStructure<FoodOrder>>(rs, HttpStatus.OK);
	}

	public ResponseEntity<ResponseStructure<List<FoodOrder>>> getAllOrder() {
		ResponseStructure<List<FoodOrder>> rs = new ResponseStructure<>();
		rs.setMessage("orders displayed");
		rs.setT(dao.getAllOrders());
		return new ResponseEntity<ResponseStructure<List<FoodOrder>>>(rs, HttpStatus.OK);
	}

	public ResponseEntity<ResponseStructure<FoodOrder>> getOrder(int id) {
		ResponseStructure<FoodOrder> rs = new ResponseStructure<>();
		rs.setMessage("order displayed");
		rs.setT(dao.getOrderById(id));
		return new ResponseEntity<ResponseStructure<FoodOrder>>(rs, HttpStatus.OK);
	}
}
